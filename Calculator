from flask import Flask, jsonify
import requests
from collections import deque
import time

app = Flask(__name__)

# Configuration
window_size = 10
numbers_queue = deque(maxlen=window_size)
test_server_url = "http://example.com/api/numbers"  # Replace with actual test server URL

# Function to fetch numbers from test server
def fetch_numbers(number_type):
    url = f"{test_server_url}/{number_type}"
    try:
        response = requests.get(url, timeout=0.5)  # Timeout after 500ms
        if response.status_code == 200:
            return response.json().get("numbers", [])
        else:
            return None
    except requests.exceptions.RequestException:
        return None

# Endpoint to handle requests
@app.route('/numbers/<numberid>')
def process_number_request(numberid):
    # Fetch numbers from test server
    fetched_numbers = fetch_numbers(numberid)
    
    if fetched_numbers is None:
        return jsonify({"error": "Error fetching numbers from test server"}), 500
    
    # Filter and store unique numbers
    new_numbers = set(fetched_numbers) - set(numbers_queue)
    numbers_queue.extend(new_numbers)
    
    # Prepare response data
    response_data = {
        "numbers": fetched_numbers,
        "windowPrevState": list(numbers_queue),  # Previous state of the window
        "windowCurrState": list(numbers_queue),  # Current state is the same for now
        "average": sum(numbers_queue) / len(numbers_queue) if numbers_queue else 0.0
    }
    
    return jsonify(response_data)

if __name__ == '__main__':
    app.run(port=9976)
